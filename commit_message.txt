feat(game-flow): 实现完整的游戏循环和状态机

本次提交引入了一个完整的游戏流程，包括警长竞选、夜间行动、白日发言和投票环节。后端实现了一个详细的状态机来管理游戏各阶段，前端也进行了相应重做以支持新的交互逻辑。

主要变更：

- **后端 (Backend):**
  - 新增 `game_logic.py` 模块，包含核心的游戏状态机和逻辑，负责处理阶段转换、角色技能、投票计算和胜负判断。
  - 扩展了 `models.py` 中的 `Game` 模型，增加了警长竞选、守卫、女巫、预言家行动等相关的状态字段。
  - 重构了 `ws_actions.py` 和 `game_manager.py`，以处理更复杂的游戏动作和阶段推进。
  - API 和 WebSocket 消息格式更新，现在主要通过 `GAME_STATE_UPDATE` 来同步完整的游戏状态。

- **前端 (Frontend):**
  - 完全重做了游戏页面 (`/game/[roomId]`)，现在可以根据游戏状态动态展示玩家信息、座位、角色和游戏日志。
  - 新增 `ActionBar` 组件，根据当前游戏阶段和玩家角色，为玩家提供相应的操作按钮（如竞选警长、投票、使用技能等）。
  - 使用 `ProfileContext` 和 `WebSocketContext` 在全局管理玩家身份和服务器连接。
  - 优化了创建/加入房间的流程，现在可以无缝过渡到游戏房间。

- **删除 (Deleted):**
  - 删除了旧的 `docs/流程.md` 文件，其内容已被新的游戏逻辑所取代。